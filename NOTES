Installation
------------
* You must have Python 2.5 installed.   http://www.python.org/
* You must have wxPython installed.   http://www.wxpython.org/

Mac users will already have both pre-installed.
Linux users will have python but probably not wxpython.
Windows users will have neither installed by default.

Unzip the source code to any folder on your disk (for instance c:\devel\) 
Cd into c:\devel\wxPython Minimalist PureMVC\src
Type: 
   python Main.py

Details
-------

The basic idea in this example is that we are modelling and visualising a single
string of a model class Data. On startup, the model's data is pushed to the GUI.
When the user hits ENTER in the GUI, the mediator picks up on this wx event and
broadcasts the pureMVC message DATA_SUBMITTED. A command class thus gets
triggered which converts the text to uppercase (this is the business logic) and
stuffs the info into the model. The model's setter broadcasts a DATA_CHANGED
message, which the mediator intercepts, updating the GUI.

Thus anything you type gets converted to uppercase and stored in the model.

"Model"
DataModelProxy is the proxy for class Data. The "Model" in pureMVC is the entire
system comprised of class Model (part of the pureMVC framework) which holds
references to one or more proxies (e.g. DataModelProxy) each of which looks
after a model (e.g. Data). Note that a model class could be more complex and the
associated proxy could look after looping and pulling out larger chunks of
information.

"View"
MyForm is the GUI, built in wxpython. MyFormMediator is the mediator which knows
about and specifically looks after MyForm, intercepting wx events from the GUI
and broadcasting pureMVC notification messages. The mediator also listens for
pureMVC notification messages and stuffs data back into the GUI. The "View" in
pureMVC is the entire system comprised of class View (part of the pureMVC
framework) which holds references to one or more mediators, each of which looks
after a GUI form or part of a GUI.

"Controller"
StartupCommand and DataSubmittedCommand are the command classes, triggered by
notification messages AppFacade.STARTUP and AppFacade.DATA_SUBMITTED
respectively. The "Controller" in pureMVC is the entire system comprised of
class Controller (part of the pureMVC framework) which holds references to one
or more commands.

The facade is a singleton and is where you define all messages types (all just
strings) and where you associate command classes with particular messages. There
can be messages NOT associated with commands, which are used for mediators to
listen to (e.g. model indirectly talking to mediators).

Notification messages have a .getName(), .getBody() and .getType(). Except for
the name, you can pass any info you like in the second two parameters, its up to
you. Typical parameters are references to forms, apps, data that has changed,
reference to objects, other string messages of your own devising. You could use
more than one parameter if say, you wanted to broadcast both the data that changed
and an actual reference to the object whose data had changed.
